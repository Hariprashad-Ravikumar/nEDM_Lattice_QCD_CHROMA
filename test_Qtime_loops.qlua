require "stdlib"
require "gauge"
require "qcd"
require "qcdlib/clover_loops_fn"
-- qcdLib = qcdLib or {};

function open_qdpc_read(L, name)
  local qdp_r = qcd.qdpc.Reader(L, name)
  return qdp_r

end

function load_qdpc_gauge(L, name)
  local qdp_r, finfo = open_qdpc_read(L, name)
  local gauge, rinfo = qdp_r:ColorMatrix(4)
  qdp_r:close()
  return gauge, finfo, rinfo
end


Nx = 48
Ny = 48
Nz = 48
Nt = 128
latsize = {Nx,Ny,Nz,Nt}
network_geom = {4, 4, 4, 3}
L = qcd.lattice{Nx,Ny,Nz,Nt}
cfg = 12000
cfg_filename = "/pscratch/sd/h/hari_8/cl21_48_128_b6p3_m0p2390_m0p2050_cfg_12000.lime"
-- cfg_filename = "/pscratch/sd/e/engel/cfgs/cl21_32_96_b6p1_m0p2850_m0p2450_b_cfg_1776.lime"

volume = 1
for i = 0, #L - 1 do
  volume = volume * L[i]
end

U, finfo, rinfo = load_qdpc_gauge(L, cfg_filename)

function toAlg(V)
  local scaledUnit = V.lattice:ColorMatrix(complex(1.0/V:colors(), 0));
  local X = (V - V:adjoin()) / 2.0;
  -- return X;
  return X - scaledUnit * X:trace();
end

local log_file = io.open("Qtime_test.txt", "w")

log_file:write("Q: G k5=0.0 Gmunu is traceless \n\n")

local G_lat = {};


for i = 1, #U do  -- #U = 4
  G_lat[i] = {};
end

for mu = 1, #U-1  do
  for nu = 0,mu-1 do
    local k5 = 0.0;
    local c1x1 = C_mxn(U, 1, 1, mu, nu)
    local c2x2 = C_mxn(U, 2, 2, mu, nu);
    local c3x3 = C_mxn(U, 3, 3, mu, nu);
    local c1x2 = C_mxn(U, 1, 2, mu, nu);
    local c1x3 = C_mxn(U, 1, 3, mu, nu);
    local Gmunu = (19.0/9.0-55.0*k5)*c1x1 + (1.0/36.0-16.0*k5)*c2x2 + (64.0*k5-32.0/45.0)*c1x2 + (1.0/15.0-6.0*k5)*c1x3 + k5*c3x3;
    local imag_Gmunu = toAlg(Gmunu);
    G_lat[mu+1][nu+1] = imag_Gmunu;
    G_lat[nu+1][mu+1] = -imag_Gmunu;
  end
end

function topoQ_part(G, x, y, z, t)
  local tmp = G[x][y]*G[z][t];
  return tmp:trace():real();
end

 
local Q = (topoQ_part(G_lat, 1, 2, 3, 4)+topoQ_part(G_lat, 1, 4, 2, 3)+topoQ_part(G_lat, 1, 3, 4, 2)) 
Q = Q*(1/(4.0*math.pi*math.pi))
chiQ = Q[{0,0,0,0}]*Q:sum()
chiQxy = (Q*Q:sum()):sum()
chiQxybyv = chiQxy/volume
-- chiQ1by4 = chiQ**(1.0/4.0)

log_file:write(string.format("Q  = %s\n", tostring(Q)))

log_file:write(string.format("Q:sum()  = %s\n", tostring(Q:sum())))

-- log_file:write(string.format("Q  = %s\n", tostring(Q)))

log_file:write(string.format("Q[{0,0,0,0}]*Q:sum()  = %s\n", tostring(chiQ)))

log_file:write(string.format("(Q*Q:sum()):sum()  = %s\n", tostring(chiQxy)))
log_file:write(string.format("(Q*Q:sum()):sum()/v  = %s\n", tostring(chiQxybyv)))

-- local Qnosum = 0
-- Qnosum = Qnosum + topoQ_part(G_lat, 1, 2, 3, 4)
-- Qnosum = Qnosum + topoQ_part(G_lat, 1, 4, 2, 3)
-- Qnosum = Qnosum + topoQ_part(G_lat, 1, 3, 4, 2)
-- Qnosum = (1/(4.0*math.pi*math.pi))*Qnosum

-- local Qt = Qnosum:sum(L:MultiSet(L[3], L:pcoord(3)))

-- log_file:write(string.format("Q  = %s\n", tostring(Q)))


-- for time = #Qt-1, 0, -1 do            -- print plaquettes in each time slice
  -- local Qt_t  = Qt[time]
  -- log_file:write(string.format("Q t = %d is %s\n", time, tostring(Qt_t))) 
-- end
