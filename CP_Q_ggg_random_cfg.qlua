require "stdlib"
require "gauge"
require "qcd"
require "qcdlib/symmetric-EQ"
require "ggg"
require "charge_conjugation_U"
require "parity_U"

function open_qdpc_read(L, name)
  local qdp_r = qcd.qdpc.Reader(L, name)
  return qdp_r
end

function load_qdpc_gauge(L, name)
  local qdp_r, finfo = open_qdpc_read(L, name)
  local gauge, rinfo = qdp_r:ColorMatrix(4)
  qdp_r:close()
  return gauge
end

function plaquette(U, i, j)
  local Ui = U[j+1]:shift(i, "from_forward")
  local Uj = U[i+1]:shift(j, "from_forward")
  local Pij = (U[i+1] * Ui * Uj:adjoin() * U[j+1]:adjoin()):trace():real()

  return Pij:sum() / (volume * 3.0)
end

function run_test(U, L, log_file)
  printf("plaquett\n")
  local s = 0
  local k = 0
  for i in interval(0, #L-1) do
    for j in skip(i, interval(0, #L-1)) do
      local sij = plaquette(U, i, j)
      log_file:write(string.format("  plaq[%d, %d] = %20.10f\n", i, j, sij))
      s = s + sij
      k = k + 1
    end
  end
  log_file:write(string.format("average plaquette %20.10f\n\n", s / k))
end


Nx = 4
Ny = 4
Nz = 4
Nt = 8

Lattice = qcd.lattice{Nx,Ny,Nz,Nt}

print("start")

do
  local r = Lattice:Int(os.random())
  for i = 0, #Lattice - 1 do
    r = r * Lattice[i] + Lattice:pcoord(i)
  end
  S = Lattice:RandomState(os.random(), r)
end

function toSUn(L, X)
  local Y = (X - X:adjoin()) / 2
  return (Y - Y:trace() / 3.0 * L:ColorMatrix(complex(1,0))):exp()
end

 function weak_SUn(L, S)
   return toSUn(L, 0.2 * S:gaussian_ColorMatrix())
 end

function strong_SUn(L, S)
  local v = weak_SUn(L, S)
  for i = 1, 100 do
    v = v * weak_SUn(L, S)
  end
  return v:proj(1e-6, 150)
end

U = {}
for i = 0, #Lattice - 1 do
  U[i+1] = strong_SUn(Lattice, S)
end

local U0 = U
volume = 1
for i = 0, #Lattice - 1 do
  volume = volume * Lattice[i]
end


local function U__parity(U, L)
   local Ucc = gauge_copy(U)
   local function update_all(old,new) return new end
   local mu
   for mu = 1,#U do
     for x = 0, L[0]-1 do
       for y = 0, L[1]-1 do
         for z = 0, L[2]-1 do
           for t = 0, L[3]-1 do
             local Umumxmymzt = U[mu][{ (L[0] - x) % L[0] , (L[1] - y) % L[1] , (L[2] - z) % L[2] , t}]
             Ucc[mu][{x,y,z,t}] = Umumxmymzt
           end
         end
       end
     end
     -- if mu == 4 then
       -- Ucc[mu] = Ucc[mu]
     -- else
       -- Ucc[mu] = Ucc[mu]:shift(mu, "from_backward"):adjoin()
     -- end
   end
   return update_all(U,Ucc)
end

local UParity = U__parity(U0, Lattice)
print("Tr UParity[3][{1,2,3,0}] = ", (UParity[3][{1,2,3,0}]):trace())

print("Tr U[3][{ (Lattice[1][0] - x) % Lattice[0] ,0,0,0}] = ", (U0[3][{ (Lattice[0] - 1) % Lattice[0] , (Lattice[1] - 2) % Lattice[1] , (Lattice[2] - 3) % Lattice[2] ,0}]):trace())
print(" (Lattice[0] - 1) % Lattice[0] = ", (Lattice[0] - 1) % Lattice[0] )

